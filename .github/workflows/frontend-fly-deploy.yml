name: Deploy Frontend to Fly.io

on:
  push:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-fly-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    if: ${{ secrets.FLY_API_TOKEN != '' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Determine environment
        id: env
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Ensure app exists
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          ENV_NAME="${{ steps.env.outputs.environment }}"
          if [ "$ENV_NAME" = "production" ]; then
            APP_NAME="${{ vars.FLY_APP_NAME_FRONTEND_PROD }}"
            REGION="${{ vars.FLY_REGION_PROD }}"
          else
            APP_NAME="${{ vars.FLY_APP_NAME_FRONTEND_STAGING }}"
            REGION="${{ vars.FLY_REGION_STAGING }}"
          fi
          if [ -z "$APP_NAME" ]; then APP_NAME="homeservicesapp-frontend"; fi
          if [ -z "$REGION" ]; then REGION="ord"; fi
          echo "Using env=$ENV_NAME app=$APP_NAME region=$REGION"
          flyctl apps list | grep -q "^${APP_NAME}\b" || flyctl apps create "${APP_NAME}" --region "${REGION}"

      - name: Set environment variables
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          ENV_NAME="${{ steps.env.outputs.environment }}"
          if [ "$ENV_NAME" = "production" ]; then
            APP_NAME="${{ vars.FLY_APP_NAME_FRONTEND_PROD }}"
            API_BASE_URL="${{ vars.VITE_API_BASE_URL_PROD }}"
            API_HOST_URL="${{ vars.VITE_API_HOST_URL_PROD }}"
          else
            APP_NAME="${{ vars.FLY_APP_NAME_FRONTEND_STAGING }}"
            API_BASE_URL="${{ vars.VITE_API_BASE_URL_STAGING }}"
            API_HOST_URL="${{ vars.VITE_API_HOST_URL_STAGING }}"
          fi
          if [ -z "$APP_NAME" ]; then APP_NAME="homeservicesapp-frontend"; fi
          
          # Set build-time environment variables as secrets
          if [ -n "$API_BASE_URL" ]; then
            flyctl secrets set VITE_API_BASE_URL="$API_BASE_URL" --app "$APP_NAME" --stage
          fi
          if [ -n "$API_HOST_URL" ]; then
            flyctl secrets set VITE_API_HOST_URL="$API_HOST_URL" --app "$APP_NAME" --stage
          fi
          flyctl secrets set VITE_ENVIRONMENT="$ENV_NAME" --app "$APP_NAME" --stage

      - name: Deploy to Fly
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          ENV_NAME="${{ steps.env.outputs.environment }}"
          if [ "$ENV_NAME" = "production" ]; then
            APP_NAME="${{ vars.FLY_APP_NAME_FRONTEND_PROD }}"
          else
            APP_NAME="${{ vars.FLY_APP_NAME_FRONTEND_STAGING }}"
          fi
          if [ -z "$APP_NAME" ]; then APP_NAME="homeservicesapp-frontend"; fi
          flyctl deploy --app "$APP_NAME" --remote-only --auto-confirm

      - name: Get deployment URL
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          ENV_NAME="${{ steps.env.outputs.environment }}"
          if [ "$ENV_NAME" = "production" ]; then
            APP_NAME="${{ vars.FLY_APP_NAME_FRONTEND_PROD }}"
          else
            APP_NAME="${{ vars.FLY_APP_NAME_FRONTEND_STAGING }}"
          fi
          if [ -z "$APP_NAME" ]; then APP_NAME="homeservicesapp-frontend"; fi
          echo "ðŸš€ Frontend deployed to: https://${APP_NAME}.fly.dev"