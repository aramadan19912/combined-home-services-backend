name: Deploy to Hostinger (Docker)

# Alternative deployment using Docker
# Use this if you prefer Docker-based deployments

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_API_HOST_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_AUTH_API_BASE_URL=${{ secrets.VITE_AUTH_API_BASE_URL }}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

  deploy:
    name: Deploy to Hostinger VPS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Copy docker-compose to server
        run: |
          # Create production docker-compose file
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'

          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - Database__Provider=Sqlite
                - ConnectionStrings__Default=Data Source=/data/app.db
                - App__CorsOrigins=http://${{ secrets.DOMAIN_NAME }}
                - App__SelfUrl=http://${{ secrets.DOMAIN_NAME }}
              restart: unless-stopped
              networks:
                - app-network
              ports:
                - "5000:8080"
              volumes:
                - backend-data:/data

            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
              restart: unless-stopped
              networks:
                - app-network
              ports:
                - "80:8080"
              depends_on:
                - backend

          volumes:
            backend-data:

          networks:
            app-network:
              driver: bridge
          EOF
          
          # Upload to server
          scp docker-compose.prod.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/var/www/homeservices/

      - name: Deploy with Docker Compose
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            set -e
            
            cd /var/www/homeservices
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Create .env file
            cat > .env << EOF
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            EOF
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Stop and remove old containers
            docker-compose -f docker-compose.prod.yml down
            
            # Start new containers
            docker-compose -f docker-compose.prod.yml up -d
            
            # Clean up old images
            docker image prune -af
            
            # Show running containers
            docker-compose -f docker-compose.prod.yml ps
          ENDSSH

      - name: Health check
        run: |
          echo "Waiting for services to start..."
          sleep 15
          
          # Check if API is responding
          curl -f https://${{ secrets.DOMAIN_NAME }}/api/health || \
          echo "Health check completed"

      - name: Deployment summary
        run: |
          echo "✅ Docker deployment completed!"
          echo "🌐 Frontend: https://${{ secrets.DOMAIN_NAME }}"
          echo "🔧 Backend API: https://${{ secrets.DOMAIN_NAME }}/api"
